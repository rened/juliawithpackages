#!/bin/bash

# stop on error
set -e

# default for unset ENV variables
if [ -z "$REQUIRE" ]
then
	REQUIRE=REQUIRE.jwp
fi
if [ -z "$JULIA" ]
then
	JULIA=julia
fi


# need a declaration file
if [ ! -e $REQUIRE ]
then
	echo "juliawithpackages: $REQUIRE not found"
	exit
fi


# set variables
if [ `uname` == Darwin ]
then
	MD5="md5 -q"    
	STAT="stat -f \"%p\""
	STATVALUE=\"40555\"
else
	MD5=md5sum
	STAT="stat -c %a"
	STATVALUE=555
fi
HASH=`$MD5 $REQUIRE | tr " " "\n" | head -n 1`
export JULIA_PKGDIR=$HOME/.julia/juliawithpackages/$HASH
export JULIA_LOAD_PATH="`pwd`/modules"
echo  $($STAT $JULIA_PKGDIR/$i)
echo $STATVALUE

# remove non-finished previous installation attempts
for i in v0.3 v0.4
do
	if [ -e $JULIA_PKGDIR/$i ] && [ $($STAT $JULIA_PKGDIR/$i) != $STATVALUE ];
	then
		chmod -R +w $JULIA_PKGDIR/$i && rm -rf $JULIA_PKGDIR/$i
		echo "removed un-finished installation in $JULIA_PKGDIR/$i"
	fi
done

# install packages if not installled yet
if [ ! -e $JULIA_PKGDIR/v0.3/REQUIRE ] && [ ! -e $JULIA_PKGDIR/v0.4/REQUIRE ]; 
then
	# find out where the script is:
	# (thanks to http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in)

	SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	  SOURCE="$(readlink "$SOURCE")"
	  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

	julia $DIR/installpackages.jl $REQUIRE
fi


# invoke julia
$JULIA --no-startup $* 
	

